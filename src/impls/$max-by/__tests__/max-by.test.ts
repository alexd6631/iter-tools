/**
 * @generated-from ./$max-by.test.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { maxBy } from 'iter-tools-es';
import { wrap } from '../../../test/helpers.js';

type Person = { name: string; age: number };
const personAge = (p: Person) => p.age;
const ascendingOrder = (a: number, b: number) => a - b;
const descendingOrder = (a: number, b: number) => b - a;

const youngest = {
  name: 'a',
  age: 10,
};
const middle = {
  name: 'b',
  age: 20,
};
const oldest = {
  name: 'c',
  age: 30,
};

const people = [youngest, middle, oldest];

describe('maxBy', () => {
  describe('when source is empty', () => {
    it('should return undefined', () => {
      expect(maxBy(personAge, null)).toEqual(undefined);
      expect(maxBy(personAge, ascendingOrder, null)).toEqual(undefined);
      expect(maxBy(personAge, ascendingOrder, undefined)).toEqual(undefined);
      expect(maxBy(personAge, ascendingOrder, wrap([]))).toEqual(undefined);
    });
  });

  describe('when source has a single value', () => {
    it('should return that value', () => {
      expect(maxBy((i) => i, wrap([1]))).toEqual(1);
      expect(maxBy((i) => i, ascendingOrder, wrap([1]))).toEqual(1);
      expect(maxBy((i) => i, descendingOrder, wrap([1]))).toEqual(1);
    });
  });

  describe('when source has values', () => {
    it('should return the maximum value according to mapper and compare function', () => {
      expect(maxBy(personAge, wrap(people))).toEqual(oldest);
      expect(maxBy(personAge, ascendingOrder, wrap(people))).toEqual(oldest);
      expect(maxBy(personAge, descendingOrder, wrap(people))).toEqual(youngest);
    });
  });
});
